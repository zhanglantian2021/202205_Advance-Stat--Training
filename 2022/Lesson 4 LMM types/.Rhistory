newdata$upr_T <- preds$fit+preds$se.fit*1.96
newdata$lwr_T <- preds$fit-preds$se.fit*1.96
head(newdata)
## plot with prediction in the transformed range
plot(newdata$pupage,newdata$fit_T,type="l")
lines(newdata$pupage,newdata$upr_T,lty=2)
lines(newdata$pupage,newdata$lwr_T,lty=2)
newdata$fit <- plogis(preds$fit)
newdata$upr <- plogis(preds$fit+preds$se.fit*1.96)
newdata$lwr <- plogis(preds$fit-preds$se.fit*1.96)
head(newdata) #note the extra columns in the dataframe
str(newdata)
## plot raw data and model prediction in the response range
#for this we will use ggplot
ggplot(data=seal, aes(x=pupage, y=n.response/n.obs)) + geom_point()+
geom_smooth(data=newdata,aes(x=pupage, y=fit, ymin=lwr, ymax=upr),
stat='identity')
## fit the tested model: aggression ~ pupage
mod.seal1 <- glm(cbind(n.response, n.obs-n.response)~pupage, data=seal,family=binomial)
## fit the tested model: aggression ~ pupage
mod.seal1 <- glm(cbind(n.response, n.obs-n.response)~pupage, data=seal,family=binomial)
# residual and null deviance estimates provided at the bottom for tested and null models respectively
logLik(mod.seal1)
## fit the null model: aggression ~ 1
mod.seal0 <- glm(cbind(n.response, n.obs-n.response)~1, data=seal,family=binomial)
summary(mod.seal0)
# residual and null deviances are identical
logLik(mod.seal0)
# residual and null deviance estimates provided at the bottom for tested and null models respectively
logLik(mod.seal1)
#how to get a saturated model? A saturated model has one parameter for each data point
#we can make a dummy to carry this
seal $x1 <- as.factor(1:nrow(seal))
seal $x1
mod.sealS <- glm(cbind(n.response, n.obs-n.response)~x1, data=seal,family=binomial)
summary(mod.sealS)
#now you can see the residual deviance for the saturated model is basically zero
logLik(mod.sealS)
#so residual deviance for tested model is:
2*(logLik(mod.sealS)-logLik(mod.seal1))
#so residual deviance for null model is:
2*(logLik(mod.sealS)-logLik(mod.seal0))
#compare with output from summary(mod.seal1)
summary(mod.seal1)
#Now compare the residual and null deviances (ask whether there has been a significant reduction in the deviance caused by adding in the predictor pupage)
anova(mod.seal1,test='Chisq')
aphid2 <- read.csv('/Users/kyletomlinson/Dropbox/Teaching/XTBG advanced stats 2021/Lectures/Lesson 2 Generalised linear models/AphidData2.csv', h=T)
#check out the data
summary(aphid2) #two treatments and counts of aphids. typical poisson data
aphid2$trt <- as.factor(aphid2$trt)
#check out the data
summary(aphid2) #two treatments and counts of aphids. typical poisson data
mod1 <- glm(n.aphids~trt, data=aphid2, family=poisson)
summary(mod1)
#check for overdispersion formally
chisq <- sum(resid(mod1, type='pearson')^2)
chisq/df.residual(mod1) ## much greater than 1
## significantly so?
1-pchisq(chisq, df.residual(mod1)) ## Very significant
#include library to run the dispersiontest
library(AER)
#from the chisq residuals estimate, we know its overdispersion, so set up the test to  check for this
dispersiontest(mod1,alternative = "greater")
mod.qp <- glm(n.aphids~trt, data=aphid2, family=quasipoisson(link=log))
coef(mod.qp)
coef(mod1)
quartz()
par(mfrow=c(2,2)); plot(mod1)
quartz()  #windows people, please use "windows()" here
par(mfrow=c(2,2)); plot(mod.qp)
sum(resid(mod1, type='pearson')^2)/df.residual(mod1)
sum(resid(mod.qp, type='pearson')^2)/df.residual(mod.qp) ## the same
summary(mod1)$dispersion
summary(mod.qp)$dispersion ## different between models
#but look what has happened to the standard errors of the model outputs
summary(mod1)
summary(mod.qp)
#but look what has happened to the standard errors of the model outputs
coef(summary(mod1))
coef(summary(mod.qp))
#negative binomial
library(MASS)
mod.nb <- glm.nb(n.aphids~trt, data=aphid2)
summary(mod.nb)
quartz(); par(mfrow=c(2,2));plot(mod.nb)
#CMP
library(COMPoissonReg)
mod.CMP <- glm.cmp(n.aphids~trt, data=aphid2)
summary(mod.CMP)
coef(mod1)
coef(mod.qp)
coef(mod.nb)
coef(mod.CMP)
#compare AIC values of models
AIC(mod1); AIC(mod.nb); AIC(mod.CMP)
mod1 <- glm(n.aphids~trt, data=aphid2, family=poisson)
summary(mod1)
#check for overdispersion formally
chisq <- sum(resid(mod1, type='pearson')^2)
chisq
summary(mod.CMP)
#load the data and look at its structure
mydata <- read.csv("binary.csv",header=T,sep=" ")
## view the first few rows of the data
head(mydata)
#NOTE: R is reading Rank as a numeric. We need to convert it to a factor. (In general, ALWAYS check the summary() statement or str() statment of imported data to make sure that your data columns are of the correct type.)
mydata$rank <- as.factor(mydata$rank)
#NOTE: R is reading Rank as a numeric. We need to convert it to a factor. (In general, ALWAYS check the summary() statement or str() statment of imported data to make sure that your data columns are of the correct type.)
mydata$rank <- as.factor(mydata$rank)
#recheck the data
summary(mydata)
mylogit <- glm(admit ~ gre+gpa+rank, data = mydata, family = "binomial")
summary(mylogit)
par(mfrow=c(2,2)); plot(mylogit)
# perform an overdispersion test (recall we compare residual chi-sq to the residual degrees of freedom)
chisq <- sum(resid(mylogit, type='pearson')^2)
chisq/df.residual(mylogit) ## close to 1; no overdispersion problem
library(arm)
x <- predict(mylogit)
y <- resid(mylogit)
binnedplot(x,y)
null.logit <- glm(admit ~ 1, data = mydata, family = "binomial")
summary(null.logit)
dim(mydata)
anova(null.logit,mylogit,test="Chisq")
#now check the deviance explained by each parameter in the model
anova(mylogit,test="Chisq")
mydata <- read.csv("binary.csv",header=T,sep=" ")
summary(mydata)
mydata$rank <- as.factor(mydata$rank)
glm1 <- glm(admit ~ gre+gpa+rank, data = mydata, family = "binomial")
summary(glm1)
glm2 <- glm(admit ~ gpa+rank, data = mydata, family = "binomial")
summary(glm1)
glm2 <- glm(admit ~ gpa+rank, data = mydata, family = "binomial")
anova(glm1,glm2,test="Chisq")
library(lme4)
DogID = c(rep(1:16, each = 4))
Drug = c(rep(rep(1:2,each = 4),8))
DogType = c(rep(1:2,each = 32))
Time = c(rep(1:4,16))
Yhist = c(12,3,45,34,45,67,78,34,56,45,67,89,43,52,65,76,98,13,24,16,78,75,48,24,34,12,46,23,46,18,43,52,65,76,98,13,24,16,78,12,3,45,34,45,67,78,34,56,45,67,89,43,52,65,76,98,13,24,16,78,75,48,24,34)
df1 <- data.frame(DogID,Drug,DogType,Time,Yhist)
df1$DogID <- as.factor(df1$DogID)
df1$Drug <- as.factor(df1$Drug)
df1$DogType <- as.factor(df1$DogType)
df1$Time <- as.factor(df1$Time)
summary(df1)
#we can handle this with ANOVA
mod1 <- aov(Yhist~Drug*DogType*Time+Error(DogID/Time),df1)
summary(mod1)
MM1 <- lmer(Yhist~Drug*DogType*Time + (1|DogID),df1)
summary(MM1)
anova(MM1)
#NOW lets see what happens when we introduce some missing values into the response data
#please note that I introduce missing values using "NA", which basically means 'not available'
Yhist = c(12,3,45,34,45,67,78,34,56,45,67,89,43,52,65,76,98,13,24,16,78,75,48,56,34,12,46,23,46,18,43,52,65,76,98,13,24,16,78,12,3,45,NA,45,67,78,34,56,45,67,89,43,52,65,76,98,13,24,16,78,75,48,24,34)
df2 <- data.frame(DogID,Drug,DogType,Time,Yhist)
df2$DogID <- as.factor(df2$DogID)
df2$Drug <- as.factor(df2$Drug)
df2$DogType <- as.factor(df2$DogType)
df2$Time <- as.factor(df2$Time)
summary(df2)
MM2 <- lmer(Yhist~Drug*DogType*Time + (1|DogID),df2)
summary(MM2)
mod2 <- aov(Yhist~Drug*DogType*Time+Error(DogID/Time),df2)
devtools::install_version('rstan', version = '2.19.3', repos = "http://cran.us.r-project.org")
library(brms)
library(ggplot2)
library(ape)
library(caper)
#################################################
#### load trait data #####
#################################################
setwd("/Users/kyletomlinson/Dropbox/Teaching/XTBG advanced stats 2021/Lectures/Lesson 10 The animal model")
# database with the corrected data
bark <- read.csv("bark/bark_nutrition.csv", header = TRUE, sep = ",", row.names = NULL)
summary(bark)
bark$Species <- as.factor(bark$Species)
bark$Family <- as.factor(bark$Family)
bark$Month <- as.factor(bark$Month)
bark$Function <- as.factor(bark$Function)
summary(bark) #note that there are multiple individuals per species
dim(bark)
length(unique(bark$Species)) #53 species
phylo <- read.tree("/Users/kyletomlinson/Dropbox/Teaching/XTBG advanced stats 2021/Lectures/Lesson 10 The animal model/bark/scenario.2_run.1.tre")
plot(phylo)
summary(phylo)  #31 species
# there are no polytomies
is.binary.tree(phylo) #TRUE
# check tree is ultrametric
is.ultrametric(phylo) # TRUE
#try comparative data
combine<-comparative.data(phylo,bark,Species,vcv=TRUE,na.omit=F)
#different route
#first reduce data to list of common taxa with tree
n1<-unique(phylo$tip.label)
str(n1)
bark2 <- bark[bark$Species %in% n1,]
dim(bark)
dim(bark2)
length(unique(bark2$Species)) #only 27, less than the tree
#so, second reduce tree to match common taxa with data
n2<-unique(bark2$Species)
phylo2<-keep.tip(phylo,phylo$tip.label[match(n2, phylo$tip.label)])
summary(phylo2)
#make the covariance matrix from the phylogeny
phylo_cor <- ape::vcv.phylo(phylo2)
summary(phylo_cor)
#make an additional factor to reference the species in the phylogeny
bark2$phylo2 <- bark2$Species
summary(bark2)
#Distribution
par(mfrow=c(1,3))
plot(density((bark2$D)))
plot(density(sqrt(bark2$D)))
plot(density(log(bark2$D)))
bark2 $Dlog=log(bark2 $D)
summary(bark2)
#Full model: Crude protein available in bark
model_Flog <-brm(Dlog~Function+(1|phylo2)+(1|Species),
cov_ranef = list(phylo2 = phylo_cor),
data = bark2, family = gaussian(link="identity"), sample_prior = TRUE,
iter = 10000,warmup = 5000, chains = 4, cores = 4,
thin = 10, save_all_pars = TRUE,seed=T,
control=list(adapt_delta=0.99))
#use summary() to check convergence of the model and the parameter estimates
summary(model_Flog)
model_Flog <-brm(Dlog~Function+(1|phylo2)+(1|Species),
cov = list(phylo2 = phylo_cor),
data = bark2, family = gaussian(link="identity"), sample_prior = TRUE,
iter = 10000,warmup = 5000, chains = 4, cores = 4,
thin = 10, save_all_pars = TRUE,seed=T,
control=list(adapt_delta=0.99))
model_Flog <-brm(Dlog~Function+(1|phylo2)+(1|Species),
cov_ranef = list(phylo2 = phylo_cor),
data = bark2, family = gaussian(link="identity"), sample_prior = TRUE,
iter = 10000,warmup = 5000, chains = 4, cores = 4,
thin = 10, save_all_pars = TRUE,seed=T,
control=list(adapt_delta=0.99))
cores()
?core
??core
## preliminaries
rm(list=ls())
## Set the working directory
setwd("/Users/kyletomlinson/Dropbox/Teaching/XTBG advanced stats 2021/Lectures/Lesson 5 LMMs")
## Set the working directory
setwd("/Users/kyletomlinson/Dropbox/Teaching/XTBG advanced stats 2021/Lectures/Lesson 4 LMM types")
getwd()
## Load the libraries
library(ggplot2)
library(lme4) ## library for linear mixed effects models in R
library(car)
library(arm)
library(MuMIn)
## load the data
radon <- read.csv('exampledata/Radon_Data_RB.csv', h=TRUE)
## Look at your data
dim(radon)
summary(radon)
radon$county <- as.factor(radon$county)
radon$cgroup <- as.factor(radon$cgroup)
boxplot(radon~floor, data=radon, notch=T)
par(mfrow=c(1,1))
boxplot(radon~floor, data=radon, notch=T)
ggplot(data=radon, aes(x=floor, y=radon,group=1)) + geom_point() +
geom_smooth(method='lm')
ggplot(data=radon, aes(x=floor, y=radon, group=county)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(~county)
##################################
## now fit a simple linear model
##################################
mod.radon.lm1 <- lm(radon~floor, data=radon)
par(mfrow=c(2,2))
plot(mod.radon.lm1)
summary(mod.radon.lm1) ## quick look at model
## CODE 4.1
## Fitting a mixed-effects model with lmer
###############################################
mod.radon.lmer1 <- lmer(radon~floor + (1|county), data=radon)
par(mfrow=c(1,2))
hist(resid(mod.radon.lmer1))
hist(ranef(mod.radon.lmer1)[[1]][,1])
str(mod.radon.lmer1)
ranef(mod.radon.lmer1)[[1]][,1]
## Random effects should be normally distributed
par(mfrow=c(1,1)); qqPlot(res1)
res1 <- ranef(mod.radon.lmer1)$county[,1]
res1 <- ranef(mod.radon.lmer1)$county[,1]
## Random effects should be normally distributed
par(mfrow=c(1,1)); qqPlot(res1)
gfloor <- fixef(mod.radon.lmer1)["(Intercept)"] +
ranef(mod.radon.lmer1)$county$"(Intercept)"
gfloor
gfloor <- fixef(mod.radon.lmer1)["(Intercept)"] +
ranef(mod.radon.lmer1)$county$"(Intercept)"
gfloor
hist(gfloor)
abline(v=mean(gfloor), col=2)
fixef(mod.radon.lmer1)["(Intercept)"]
fixef(mod.radon.lmer1)["(Intercept)"] +
fixef(mod.radon.lmer1)["floor1"]
fixef(mod.radon.lmer1)["(Intercept)"] +
fixef(mod.radon.lmer1)["floor1"]
fixef(mod.radon.lmer1)["(Intercept)"] +fixef(mod.radon.lmer1)["floor1"]
fixef(mod.radon.lmer1)["(Intercept)"]
fixef(mod.radon.lmer1)["floor1"]
fixef(mod.radon.lmer1)["(Intercept)"] +fixef(mod.radon.lmer1)["floor"]
firstfloor <- fixef(mod.radon.lmer1)["(Intercept)"] +fixef(mod.radon.lmer1)["floor"]+ ranef(mod.radon.lmer1)$county$"(Intercept)"
firstfloor
mean(firstfloor)
ggplot(data=radon, aes(x=floor, y=radon, group=county)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(~county)
#so add random slopes into the model
mod.radon.lmer2 <- lmer(radon ~ floor + (1+floor|county), data=radon)
summary(mod.radon.lmer2) ## summary of the model
## compare the models
rbind(fixef(mod.radon.lmer1),fixef(mod.radon.lmer2)) ## fixed effects change slightly.
summary(ranef(mod.radon.lmer2)$county) ## now two columns here
summary(mod.radon.lm1) ## quick look at model
s=coef(summary(mod.radon.lm1))
coef(summary(mod.radon.lm1))
coef(summary(mod.radon.lmer1))
## Do they show any trend?
## plot residuals against fitted values
resids <- resid(mod.radon.lmer2, type='pearson')
length(resids)
plot(resids~fitted(mod.radon.lmer2))
lines(lowess(resids~fitted(mod.radon.lmer2)), col='red')
plot(sqrt(abs(resids))~ fitted(mod.radon.lmer2))
lines(lowess(sqrt(abs(resids))~
fitted(mod.radon.lmer2)), col='red')
## and normally distributed?
qqPlot(resids)
par(mfrow=c(1,2))
qqPlot(ranef(mod.radon.lmer2)$county$'(Intercept)')
qqPlot(ranef(mod.radon.lmer2)$county$floor)
## to get an R^2 type statistic (not equivalent to OLS R-square)
r.squaredGLMM(mod.radon.lmer2)
## are my data nested?
summary(radon)
radon$floor <- as.factor(radon$floor)
## are my data nested?
summary(radon)
table(radon$cgroup, radon$county) ## each county is only occurring once
## or (assuming lme4 is loaded)
isNested(radon$county, radon$cgroup)
## county is nested in cgroup
isNested(radon$cgroup, radon$county) # cgroup is not nested in county!
### fitting a  nested model
mod.radon.lmer3 <- lmer(radon~floor + (1|cgroup/county), data=radon)
summary(mod.radon.lmer3)
library(brms)
library(ggplot2)
library(ape)
library(caper)
library(performance)
setwd("/Users/kyletomlinson/Dropbox/Teaching/XTBG advanced stats 2021/Lectures/Lesson 10 The animal model")
# database with the corrected data
bark <- read.csv("bark/bark_nutrition.csv", header = TRUE, sep = ",", row.names = NULL)
summary(bark)
bark$Species <- as.factor(bark$Species)
bark$Family <- as.factor(bark$Family)
bark$Month <- as.factor(bark$Month)
bark$Function <- as.factor(bark$Function)
summary(bark)
dim(bark)
length(unique(bark$Species))
phylo <- read.tree("bark/scenario.2_run.1.tre")
plot(phylo)
summary(phylo)  #31 species
# there are no polytomies
is.binary.tree(phylo) #TRUE
# check tree is ultrametric
is.ultrametric(phylo) # TRUE
#try comparative data
combine<-comparative.data(phylo,bark,Species,vcv=TRUE,na.omit=F)
n1<-unique(phylo$tip.label)
str(n1)
bark2 <- bark[bark$Species %in% n1,]
dim(bark2)
length(unique(bark2$Species)) #only 27, less than the tree
#so, second reduce tree to match common taxa with data
n2<-unique(bark2$Species)
phylo2<-keep.tip(phylo,phylo$tip.label[match(n2, phylo$tip.label)])
summary(phylo2)
#make the covariance matrix from the phylogeny
phylo_cor <- ape::vcv.phylo(phylo2)
summary(phylo_cor)
#make an additional factor to reference the species in the phylogeny
bark2$phylo2 <- bark2$Species
summary(bark2)
par(mfrow=c(1,3))
plot(density((bark2$D)))
plot(density(sqrt(bark2$D)))
plot(density(log(bark2$D)))
bark2 $Dlog=log(bark2 $D)
summary(bark2)
model_Flog <-brm(Dlog~Function+(1|phylo2)+(1|Species),
cov_ranef = list(phylo2 = phylo_cor),
data = bark2, family = gaussian(), sample_prior = TRUE,
iter = 10000,warmup = 5000, chains = 4, cores = 4,
thin = 10, save_all_pars = TRUE,seed=T,
control=list(adapt_delta=0.99))
model_Flog
install.packages(c("ape", "apTreeshape", "asremlPlus", "bayesplot", "rstan"))
no
install.packages(c("ape", "apTreeshape", "asremlPlus", "bayesplot", "rstan"))
## Set the working directory
setwd("/Users/kyletomlinson/Dropbox/Teaching/XTBG advanced stats 2021/Lectures/Lesson 4 LMM types")
getwd()
## Load the libraries
library(ggplot2)
library(lme4) ## library for linear mixed effects models in R
library(car)
library(arm)
library(MuMIn)
biodepth <- read.csv('exercises/Biodepth.csv', h=TRUE)
plantsoil <- read.csv('exercises/plantsoil.csv', h=TRUE)
summary(plantsoil)
biodepth <- read.csv('exercises/Biodepth.csv', h=TRUE)
summary(biodepth)
biodepth$location <- as.factor(biodepth$location)
summary(biodepth)
biodepth$location <- as.factor(biodepth$location)
biodepth$block <- as.factor(biodepth$block)
summary(biodepth)
is.nested(biodepth$block,biodepth$location)
library(ggplot2)
library(lme4) ## library for linear mixed effects models in R
library(car)
library(arm)
library(MuMIn)
is.nested(biodepth$block,biodepth$location)
is.Nested(biodepth$block,biodepth$location)
isNested(biodepth$block,biodepth$location)
biodepth$blocknew <- interaction(biodepth$block,biodepth$location)
summary(biodepth)
isNested(biodepth$blocknew,biodepth$location)
#look at distribution of the response data
hist(biodepth)
#look at distribution of the response data
par(mfrow=c(1,1));hist(biodepth)
#look at distribution of the response data
par(mfrow=c(1,1));hist(biodepth)
#look at distribution of the response data
par(mfrow=c(1,1)); hist(biodepth$biomass)
par(mfrow=c(2,2))
hist(biodepth$biomass)
hist((biodepth$biomass)^(1/2))
hist((biodepth$biomass)^(1/3))
hist(log(biodepth$biomass))
summary(biodepth)
#make the model
mod1 <- lmer((biomass)^(1/3)~log.diversity+(1|location/blocknew),biodepth)
summary(mod1)
resids <- resid(mod1, type='pearson')
length(resids)
## Are the residuals homoscedastic?
## plot the sqrt of the absolute residuals against fitted values
plot(sqrt(abs(resids))~ fitted(mod1))
lines(lowess(sqrt(abs(resids))~ fitted(mod1)), col='red')
## Are the residuals homoscedastic?
## plot the sqrt of the absolute residuals against fitted values
par(mfrow=c(1,1))
plot(sqrt(abs(resids))~ fitted(mod1))
lines(lowess(sqrt(abs(resids))~ fitted(mod1)), col='red')
## and normally distributed?
qqPlot(resids)
par(mfrow=c(1,2))
qqPlot(ranef(mod1)$location$'(Intercept)')
qqPlot(ranef(mod1)$blocknew$'(Intercept)')
## to get an R^2 type statistic (not equivalent to OLS R-square)
r.squaredGLMM(mod1)
biodepth <- read.csv('exercises/Biodepth.csv', h=TRUE)
summary(biodepth)
head(biodepth,n=10)
biodepth$location <- as.factor(biodepth$location)
biodepth$block <- as.factor(biodepth$block)
summary(biodepth)
isNested(biodepth$block,biodepth$location)
table(biodepth$location,biodepth$block)
biodepth$blocknew <- interaction(biodepth$block,biodepth$location)
summary(biodepth)
isNested(biodepth$blocknew,biodepth$location)
table(biodepth$location,biodepth$blocknew)
#look at distribution of the response data
par(mfrow=c(1,1)); hist(biodepth$biomass)
par(mfrow=c(2,2))
hist(biodepth$biomass)
hist((biodepth$biomass)^(1/2))
hist((biodepth$biomass)^(1/3))
hist(log(biodepth$biomass))
mod1 <- lmer((biomass)^(1/3)~log.diversity+(1|location/blocknew),biodepth)
summary(mod1)
resids <- resid(mod1, type='pearson')
length(resids)
par(mfrow=c(1,1))
plot(sqrt(abs(resids))~ fitted(mod1))
lines(lowess(sqrt(abs(resids))~ fitted(mod1)), col='red')
## and normally distributed?
qqPlot(resids)
par(mfrow=c(1,2))
qqPlot(ranef(mod1)$location$'(Intercept)')
qqPlot(ranef(mod1)$blocknew$'(Intercept)')
## to get an R^2 type statistic (not equivalent to OLS R-square)
r.squaredGLMM(mod1)
