rm(list=ls())
library(nlme)
library(ggplot2)
irr2 <- data.frame(water=runif(100, 0, 10), soil=sample(c('loam', 'sand'), 100, replace=T))
summary(irr2)
dim(irr2)
irr2$soil <- as.factor(irr2$water)
summary(irr2)
irr2 <- data.frame(water=runif(100, 0, 10), soil=sample(c('loam', 'sand'), 100, replace=T))
dim(irr2)
summary(irr2)
irr2$soil <- as.factor(irr2$soil)
summary(irr2)
## make up a heterscedastic error where the variance increases
## with the fitted values
beta <- c(5, 0.4)   #these are the coefficients of our regression relationship ;-)
X <- model.matrix(~water, data=irr2)
X   #now it is set up as the components of a regression model ~ 1 + B*Water
#predict y values using X and the betas: y = X*beta
irr2$y <- as.vector(X %*% beta)
summary(irr2)
plot(irr2$water,irr2$y)
#even variance
irr2$y_even <- irr2$y + rnorm(100, mean=0, sd=sqrt(0.1))
plot(irr2$water,irr2$y_even)
## make the variance increase with the mean
irr2$y <- irr2$y + rnorm(100, mean=0, sd=sqrt(0.1*irr2$y^3))
plot(irr2$water,irr2$y)
#first use a model assuming no covariance error structure
modlm <- lm(y ~ water, data=irr2)
summary(modlm)
mod1 <- gls(y ~ water, data=irr2)
summary(mod1)
plot(mod1, (abs(resid(.)))^(1/2)~fitted(.,type='pearson'), type=c('p', 'r'), abline=0)
plot(mod1, (abs(resid(.)))^(1/2)~fitted(.,type='pearson'), type=c('smooth', 'p'),abline=0)
## now model the variance as a power function of the fitted values
mod1b <- gls(y ~ water, data=irr2, weights=varPower(form=~fitted(.)))
#look at output, note additional section for variance function and parameter estimate
summary(mod1b)
## now model the variance as a power function of the fitted values
mod1b <- gls(y ~ water, data=irr2, weights=varPower(form=~fitted(.)))
## Let's make up some data :-)
irr2 <- data.frame(water=runif(100, 0, 10), soil=sample(c('loam', 'sand'), 100, replace=T))
dim(irr2)
summary(irr2)
irr2$soil <- as.factor(irr2$soil)
## make up a heterscedastic error where the variance increases
## with the fitted values
beta <- c(5, 0.4)   #these are the coefficients of our regression relationship ;-)
X <- model.matrix(~water, data=irr2)
X   #now it is set up as the components of a regression model ~ 1 + B*Water
#predict y values using X and the betas: y = X*beta
irr2$y <- as.vector(X %*% beta)
summary(irr2)
plot(irr2$water,irr2$y)
## make the variance increase with the mean
irr2$y <- irr2$y + rnorm(100, mean=0, sd=sqrt(0.1*irr2$y^3))
plot(irr2$water,irr2$y)
#first use a model assuming no covariance error structure
modlm <- lm(y ~ water, data=irr2)
summary(modlm)
mod1 <- gls(y ~ water, data=irr2)
summary(mod1)
plot(mod1, (abs(resid(.)))^(1/2)~fitted(.,type='pearson'), type=c('smooth', 'p'),abline=0)
## now model the variance as a power function of the fitted values
mod1b <- gls(y ~ water, data=irr2, weights=varPower(form=~fitted(.)))
#look at output, note additional section for variance function and parameter estimate
summary(mod1b)
plot(mod1b, abs(resid(., type='pearson'))~fitted(.), type=c('p', 'r'), abline=0) ## better
#look at output, note additional section for variance function and parameter estimate
summary(mod1b)
plot(mod1b, abs(resid(., type='pearson'))~fitted(.), type=c('smooth', 'p'), abline=0) ## better
## make the variance increase with the irrigation amount
irr2$y <- as.vector(X %*% beta)
plot(y~water, data=irr2)
irr2$y <- irr2$y + rnorm(100, mean=0, sd=irr2$water^0.5)
plot(y~water, data=irr2)
## initially you might diagnose this as a exponential growth problem
## but a histogram of y does not yield an exponential pattern
hist(irr2$y)
mod2 <- gls(y~water, data=irr2)
plot(mod2, abs(resid(., type='p'))~fitted(.), type=c('smooth', 'p'))
## not good
mod2a <- update(mod2, weights=varPower(form=~water))
## improves some diagnostics
plot(mod2a, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
summary(mod2a)
## not good
mod2a <- update(mod2, weights=varPower(form=~fitted(.)))
## improves some diagnostics
plot(mod2a, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
summary(mod2a)
beta1 <- c(5, 0.4,0.1)   #these are the coefficients of our regression relationship ;-)
X1 <- model.matrix(~water+soil, data=irr2)
X1   #now it is set up as the components of a regression model ~ 1 + B*Water
irr2$y <- as.vector(X1 %*% beta1)
irr2$y <- irr2$y + rnorm(100, mean=0, sd=irr2$water^0.5)
mod2b <- gls(y~water+soil, data=irr2)
plot(mod2b, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
mod2b2 <- gls(y~water+soil, data=irr2, weights=varPower(form=~water))
## improves some diagnostics
plot(mod2b2, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
plot(mod2b, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
mod2b2 <- gls(y~water+soil, data=irr2, weights=varPower(form=~water))
## improves some diagnostics
plot(mod2b2, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
mod2b2 <- gls(y~water+soil, data=irr2, weights=varPower(form=~fitted(.)))
## improves some diagnostics
plot(mod2b2, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
mod2b2 <- gls(y~water+soil, data=irr2, weights=varPower(form=~soil(.)))
mod2b2 <- gls(y~water+soil, data=irr2, weights=varPower(form=~soil)
## improves some diagnostics
plot(mod2b2, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
### so, lets make it that the sd is different between soil types - 2x in sand
irr2$y <- rnorm(100, mean=X %*% beta, sd=ifelse(irr2$soil=='loam', 1, 2))
## improves some diagnostics
plot(mod2b2, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
mod2b2 <- gls(y~water+soil, data=irr2, weights=varPower(form=~soil))
mod2b2 <- gls(y~water+soil, data=irr2, weights=varIdent(form=~soil))
## improves some diagnostics
plot(mod2b2, abs(resid(., type='p'))~fitted(.), type=c('p', 'r'))
## improves some diagnostics
plot(mod2b2, abs(resid(., type='p'))~fitted(.), type=c('smooth', 'p'))
### so, lets make it that the sd is different between soil types - 2x in sand
irr2$y <- rnorm(100, mean=X %*% beta, sd=ifelse(irr2$soil=='loam', 1, 2))
plot(y~soil, data=irr2)
plot(mod3, abs(resid(., type='p'))~fitted(.),type=c('p', 'r'))
mod3 <- gls(y~water, data=irr2)
plot(mod3, (abs(resid(., type='p')))^(1/2)~fitted(.)|soil, type=c('smooth', 'p')) ## variance larger in sand
plot(mod3, abs(resid(., type='p'))~fitted(.),type=c('smooth', 'p'))
plot(mod3, (abs(resid(., type='p')))^(1/2)~fitted(.)|soil, type=c('smooth', 'p')) ## variance larger in sand
plot(mod3, (abs(resid(., type='p')))^(1/2)~fitted(.),type=c('smooth', 'p'))
plot(mod3, (abs(resid(., type='p')))^(1/2)~fitted(.)|soil, type=c('smooth', 'p')) ## variance larger in sand
## now allow different variances for soil types
mod3a <- update(mod3, weights=varIdent(form=~1|soil))
plot(mod3a, (abs(resid(., type='p')))^(1/2)~fitted(.)|soil,type=c('p', 'r')) ## fixed!
#make a grouping predictor
irr2$grp <- factor(sample(1:10, nrow(irr2),replace=T) )
summary(irr2)
unique(irr2$grp)
#introduce variation into data produced by random effect levels
sigma.b <- 0.2
b1 <- rnorm(10, sd=sigma.b)
b1
Z <- model.matrix(~ 0+grp, data=irr2)
Z
irr2$y <- as.vector(X%*%beta + Z %*% b1)
plot(y~water,irr2)
irr2$y <- rnorm(nrow(irr2), mean=irr2$y, sd=irr2$y^2)
plot(y~water,irr2)
irr2$y <- as.vector(X%*%beta + Z %*% b1)
irr2$y <- as.vector(X%*%beta + Z %*% b1)
dim(irr2)
irr2$y <- irr2$y + rnorm(100, mean=0, , sd=irr2$y^2)
irr2$y <- irr2$y + rnorm(100, mean=0, sd=irr2$y^2)
summary(irr2)
plot(y~water,irr2)
irr2$y <- as.vector(X%*%beta + Z %*% b1)
irr2$y <- as.vector(X%*%beta + Z %*% b1)
plot(y~water,irr2)
irr2$y <- irr2$y + rnorm(100, mean=0, 0.1*sd=irr2$y^2)
irr2$y <- as.vector(X%*%beta + Z %*% b1)
plot(y~water,irr2)
irr2$y <- irr2$y + 0.1*rnorm(100, mean=0, sd=irr2$y^2)
plot(y~water,irr2)
irr2$y <- as.vector(X%*%beta + Z %*% b1)
plot(y~water,irr2)
irr2$y <- as.vector(X%*%beta + Z %*% b1)
plot(y~water,irr2)
irr2$y <- irr2$y + 0.05*rnorm(100, mean=0, sd=irr2$y^2)
summary(irr2)
plot(y~water,irr2)
#now run the model using lme
#first without assuming heteroscedastic errors
mod4 <- lme(y~water, random=~1|grp, data=irr2)
plot(mod4, (abs(resid(., type='p')))^(1/2)~fitted(.),type=c('smooth', 'p')) ## increasing variance
#now assuming heteroscedastic errors
mod4a <- update(mod4, weights=varPower(form=~fitted(.)))
plot(mod4a, abs(resid(., type='p'))~fitted(.), type=c('p', 'r')) ## better
plants <- read.csv('exampledata/plantdamage.csv')
summary(plants)
plants$shadehouse <- as.factor(plants$shadehouse)
plants$light <- as.factor(plants$light)
## can combine with random effects with lme
mod1 <- lme(growth~damage*light, random=~1|shadehouse,data=plants)
plot(mod1)  # looks exponential
## look at the residuals in the different light treatments
plot(mod1, resid(.)~fitted(.)|light, abline=0, layout=c(2, 1))
plot(mod1, resid(.)~fitted(.)|damage+light, abline=0, layout=c(3, 2))
mod1b <- lme(growth~damage*light, random=~1|shadehouse,
data=plants,weights=varIdent(form=~1|light))
anova(mod1, mod1b) ## model fit is much better with weights
#look at residual plots
plot(mod1)
plot(mod1b)   # much better homogeneity
plot(mod1b, resid(.)~fitted(.)|light, abline=0, layout=c(2, 1))
plot(mod1b)   # much better homogeneity
plot(mod1b, resid(.)~fitted(.)|light, abline=0, layout=c(2, 1))
plot(mod1, resid(.)~fitted(.)|light, abline=0, layout=c(2, 1))
plot(mod1b, resid(.)~fitted(.)|light, abline=0, layout=c(2, 1))
plot(mod1b, sqrt(abs(resid(.)))~fitted(.)|light, abline=0, layout=c(2, 1))
#we could also model assuming that the variance is exponential
mod1c <- lme(growth~damage*light, random=~1|shadehouse,data=plants,weights=varExp(form=~fitted(.)))
plot(mod1c)  # residuals are homogeneous
## look at the residuals in the different light treatments
plot(mod1, resid(.)~fitted(.)|light, abline=0, layout=c(2, 1))
## look at the residuals in the different light treatments
plot(mod1, resid(.)~fitted(.), abline=0, layout=c(2, 1))
## look at the residuals in the different light treatments
plot(mod1, resid(.)~fitted(.)|light, abline=0, layout=c(2, 1))
plot(mod1, resid(.)~fitted(.)|damage+light, abline=0, layout=c(3, 2))
##add weights into the model
mod1b <- lme(growth~damage*light, random=~1|shadehouse,
data=plants,weights=varIdent(form=~1|light))
plot(mod1b, sqrt(abs(resid(.)))~fitted(.)|light, abline=0, layout=c(2, 1))
#we could also model assuming that the variance is exponential
mod1c <- lme(growth~damage*light, random=~1|shadehouse,data=plants,weights=varExp(form=~fitted(.)))
anova(mod1, mod1c)
summary(mod1c)
plot(mod1c)  # residuals are homogeneous
plot(mod1c, sqrt(abs(resid(.)))~fitted(.)|light, abline=0, layout=c(2, 1))
plot(mod1c, sqrt(abs(resid(.)))~fitted(.), abline=0, layout=c(2, 1))
mod2 <- lme(log(growth+3)~damage*light, random=~1|shadehouse, data=plants)
plot(mod2)  #heterogeneity has disappeared
plot(mod2, resid(.)~fitted(.)|light, abline=0, layout=c(2, 1))
treebase <- read.csv('exampledata/Foresttype_BA.csv')
summary(treebase)
treebase <- read.csv('exampledata/Foresttype_BA.csv')
summary(treebase)
head(treebase,n=10)
summary(treebase)
treebase $Plot <- as.factor(treebase $Plot)
treebase $Fragment <- as.factor(treebase $Fragment)
treebase $forest.type <- as.factor(treebase $forest.type)
summary(treebase)
ggplot(data= treebase, aes(x=longitude, y=latitude, size=BA.ha, colour= forest.type)) + geom_point()
hist(treebase $BA.ha)
hist(log(treebase $BA.ha))
m.rs1 <- gls(log(BA.ha)~ forest.type, data= treebase)
summary(m.rs1) #some group differences significant
summary(treebase)
plot(m.rs1) ## residual homoscedasticity looks okay
## We can assess spatial autocorrelation using a variogram
## which shows how data variance is related to distance
## between observations
## if there is no spatial autocorrelation,
## then we expect to see a flat line
plot(Variogram(m.rs1, form=~longitude+latitude, resType='n'))
## increase in variance with distance...
## so now include information on the spatial distrbution between points
m.rs2 <- update(m.rs1, correlation=corExp(form=~ longitude + latitude))
anova(m.rs1, m.rs2) ## improves model fit
plot(Variogram(m.rs2, form=~longitude+latitude, resType='n'))
m.rs3 <- update(m.rs2, correlation=corExp(form=~longitude + latitude, nugget=T))
anova(m.rs1, m.rs2, m.rs3) #nugget makes no change in this case
trees <- read.csv('exampledata/trees.csv')
ggplot(data=trees, aes(x=x, y=y, colour=li, size=RGR)) +
geom_point() + facet_wrap(~sp) + coord_equal()
## naive model
m.tree1 <- lm(RGR ~ sp*li, data=trees)
## naive model again using gls function
m.tree2 <- gls(RGR ~ sp*li, data=trees)
coef(m.tree1)
coef(m.tree2) ## same result; gls assumes identity matrix
plot(trees$li,m.tree2$resid)  ## residuals dont look too bad
ggplot(data=trees, aes(x=x, y=y, colour=li, size=m.tree2$resid)) +
geom_point() + facet_wrap(~sp) + coord_equal()
## our variogram definitely indicates spatial correlation
plot(Variogram(m.tree2, form=~x+y)) ## definitely some spatial effects
## trying a gls model - takes a while
m.tree3 <- gls(RGR~sp*li, correlation=corExp(form=~x+y),data=trees)
anova(m.tree2, m.tree3) ## autocorrelation model fits better
#compare the two outputs; you will see the autocorrelation model has an extra parameter
summary(m.tree2)
summary(m.tree3)
m.tree3a <- gls(RGR~sp*li, correlation=corExp(form=~x+y, nugget=T),data=trees)
summary(m.tree1)
## naive model again using gls function
m.tree2 <- gls(RGR ~ sp*li, data=trees)
## our variogram definitely indicates spatial correlation
plot(Variogram(m.tree2, form=~x+y)) ## definitely some spatial effects
anova(m.tree2, m.tree3) ## autocorrelation model fits better
#compare the two outputs; you will see the autocorrelation model has an extra parameter
summary(m.tree2)
summary(m.tree3)
plot(Variogram(m.tree3, form=~x+y)) ## doesnt' look great
plot(Variogram(m.tree3a, form=~x+y, resType='n'))  #trend removed!
AIC(m.tree2, m.tree3, m.tree3a)
#look at summary
summary(m.tree3a)
Variogram(m.tree2, form=~x+y)
?corExp
?gls
library(nlme)
?corExp
?gls
