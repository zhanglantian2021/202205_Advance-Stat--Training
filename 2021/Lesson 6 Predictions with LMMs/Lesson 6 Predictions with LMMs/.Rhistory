rm(list=ls())
options(digits=3, width=60)
## load the relevant libraries
library(lme4)
library(ggplot2)
library(lattice)
library(arm)
library(utils)
library(car)
irr <- read.csv("exampledata/irrigation.csv")
summary(irr)
irr$soil <- as.factor(irr$soil)
summary(irr)
head(irr)
#First, let us fit a model where growth is a function of soil type and water added
mod.irr <- lm(growth ~ soil*water, data=irr)
par(mfrow=c(2,2)); plot(mod.irr)  #ok
summary(mod.irr) #everything significant
#now let us get out the predicted values (fitted values) for the data points that we used in the dataset
fit1 <- fitted(mod.irr)
irr$fitted <- fitted(mod.irr)
plot(growth~fitted,irr)
par(mfrow=c(1,1))
plot(fit1, irr$growth)
abline(a=0,b=1, col=2) ## 1:1 line
## Say we want to
##predict growth
## after adding 2 units of water
## when the soil is loam
newdat <- data.frame(soil=factor('sand'), water=2)
newdat
## Can predict at this new case with
predict(mod.irr, newdata=newdat) ## gives the expected growth rate
## we can now compute the standard error for this estimate with
predict(mod.irr, newdata=newdat, se.fit=TRUE)
## If we want confidence intervals (95%)
predict(mod.irr, newdata=newdat, interval='confidence', level=0.95)
0.388 - 1.96*0.049
0.388 + 1.96*0.049
## For prediction intervals
predict(mod.irr, newdata=newdat, interval='prediction', level=0.95)
## you might like to read these:
http://www.graphpad.com/support/faqid/1506/
http://robjhyndman.com/hyndsight/intervals/
##********* BACK TO POWERPOINT *********##
###############################
## Code 6.2 predictions with lmer
##############################
# 1. first, let's try using the predict function method
## use the plant damage data set
plants <- read.csv('exampledata/plantdamage.csv')
summary(plants)
## make 'shadehouse' and 'block' factors so that they can be treated as random effects
plants$shadehouse <- as.factor(plants$shadehouse)
plants$block <- as.factor(plants$block)
summary(plants)
mod.pl.lmer1 <- lmer(growth~light*damage + (1|shadehouse),data=plants)
summary(mod.pl.lmer1)
preddat <- expand.grid(light=c('D', 'L'),
damage=c(0, 0.1, 0.25),
shadehouse =1:10)
preddat$shadehouse <-as.factor(preddat$shadehouse)
summary(preddat)
levels(preddat$light)
levels(plants$light)
levels(preddat$shadehouse)
levels(plants$shadehouse)
## make 'shadehouse' and 'block' factors so that they can be treated as random effects
plants$light <- as.factor(plants$light)
mod.pl.lmer1 <- lmer(growth~light*damage + (1|shadehouse),data=plants)
summary(mod.pl.lmer1)
levels(preddat$light)
levels(plants$light)
levels(preddat$shadehouse)
levels(plants$shadehouse)
preddat$pred.fix <-
predict(mod.pl.lmer1, newdata=preddat, re.form=~0)
preddat
subset(preddat, light=='D' & damage==0) ## same in each shadehouse
## prediction WITH random effects for shadehouse (NOTE re.form)
preddat$pred.sh <- predict(mod.pl.lmer1, newdata=preddat, re.form=NULL)
preddat
ranef(mod.pl.lmer1)$shadehouse[1:10,1]  ## compare this with model random BLUPS
head(preddat,n=12)
0.261 - 1.69  ## = to the BLUP for shadehouse 1
ranef(mod.pl.lmer1)$shadehouse[1:10,1]  ## compare this with model random BLUPS
#recall model form
summary(mod.pl.lmer1)
## get out the model formula
form <- formula(mod.pl.lmer1, fixed.only=T)
form
form <- update(form, NULL~.) ## removes the response part
form
#we already have a prediction data matrix
preddat
#we already have a prediction data matrix
head(preddat)
form
## make the model matrix (we will use our preddat matrix levels)
predmat <- model.matrix(form, data=preddat)
head(predmat)
## remember that y = X*beta
## prediction is
preddat$pred.hand <- as.vector(predmat %*% fixef(mod.pl.lmer1))
head(preddat) ## matrix pred identical to original modelled predictions
head(preddat,n=12) ## matrix pred identical to original modelled predictions
ranefmat <- model.matrix(~0 + shadehouse, preddat)
dim(ranefmat) ## need 10 columns!
head(ranefmat,20)
preddat$pred.hr <- predmat %*% fixef(mod.pl.lmer1) +
ranefmat %*% (ranef(mod.pl.lmer1)$shadehouse[,1])
head(preddat,n=10) ## manual and automated versions agree
head(preddat,n=10) ## manual and automated versions agree
## first we need to extract the variance-covariance matrix so that we can get the standard errors
summary(mod.pl.lmer1)
vcv <- vcov(mod.pl.lmer1)
vcv
## notice that the standard errors of the fixed effects are
## equal to the sqrt of the diagonal of the vcv
sqrt(diag(vcov(mod.pl.lmer1)))
## then calculate the standard errors for each prediction pt
## using the model matrix
semod <-  sqrt(diag(predmat%*%vcv%*%t(predmat)))
semod
#we have a very large number of sampling units, so we can probably assume that the t value is being estimated from a standard t-distribution where t = 1.96
# however fo the sake of learning, our model had 103 data pts, 4 fixed effects and 1 random effect
qt(p=0.025, df = 103-4-1)  #this tells us the t-value we could use here for constructing the confidence intervals
#we have a very large number of sampling units, so we can probably assume that the t value is being estimated from a standard t-distribution where t = 1.96
# however fo the sake of learning, our model had 103 data pts, 4 fixed effects and 1 random effect
qt(p=0.05, df = 103-4-1)  #this tells us the t-value we could use here for constructing the confidence intervals
#we have a very large number of sampling units, so we can probably assume that the t value is being estimated from a standard t-distribution where t = 1.96
# however fo the sake of learning, our model had 103 data pts, 4 fixed effects and 1 random effect
qt(p=0.025, df = 103-4-1)  #this tells us the t-value we could use here for constructing the confidence intervals
## then we can get the confidence intervals
preddat$ucl <- preddat$pred.fix + semod*1.98
preddat$lcl <- preddat$pred.fix - semod*1.98
head(preddat)
ggplot(data=preddat, aes(x=damage, y=pred.fix,
ymin=lcl, ymax=ucl, colour=light)) +
geom_smooth(stat='identity') + theme_classic()
## so redefine the confidence intervals
preddat$ucl.sh <- preddat$pred.sh + semod*1.98
ggplot(data=preddat, aes(x=damage, y=pred.sh, ymin=lcl.sh, ymax=ucl.sh, colour=light)) +geom_smooth(stat='identity') +facet_wrap(~shadehouse) +theme_bw()
preddat$lcl.sh <- preddat$pred.sh - semod*1.98
ggplot(data=preddat, aes(x=damage, y=pred.sh, ymin=lcl.sh, ymax=ucl.sh, colour=light)) +geom_smooth(stat='identity') +facet_wrap(~shadehouse) +theme_bw()
summary(mod.pl.lmer1)
## how do we add this in?
##  the variation among shadehouses is given by
VarCorr(mod.pl.lmer1)
## extract the variance using
vc1 <- as.data.frame(VarCorr(mod.pl.lmer1))
vc1
var.sh <- vc1[vc1$grp=='shadehouse', 'vcov']
var.sh <- vc1[vc1$grp=='shadehouse', 'vcov']
var.sh
## now recalculate the std. errors
semod <-  sqrt(diag(predmat%*%vcv%*%t(predmat)) + var.sh)
semod
preddat$ucl.fix <- preddat$pred.fix + semod*1.98
preddat$lcl.fix <- preddat$pred.fix - semod*1.98
head(preddat,n=15)   #sequence repeats across greenhouses
ggplot(data=preddat, aes(x=damage, y=pred.fix, ymin=lcl.fix, ymax=ucl.fix, colour=light)) +geom_smooth(stat='identity') +theme_classic()
## prediction with NO random effects
preddat$pred.fix <-
predict(mod.pl.lmer1, newdata=preddat, re.form=~0,se.fit=T)
## prediction with NO random effects
preddat$pred.fix <-
predict(mod.pl.lmer1, newdata=preddat, re.form=~0)
predict(mod.pl.lmer1, newdata=preddat, se.fit=TRUE)
?predict.merMod
biodepth <- read.csv("exampledata/Biodepth.csv")
summary(biodepth)
biodepth$location<-as.factor(biodepth$location)
biodepth$block<-as.factor(biodepth$block)
mod1 <- lmer(sqrt(biomass)~log.diversity + (1|location), data=biodepth)
summary(mod1)
summary(biodepth)
unique(biodepth$location)
char <- unique(biodepth$location)
char
#
preddat <- expand.grid(log.diversity=c(1,2,4,8,16,32),
location =unique(biodepth$location))
preddat
unique(biodepth$location)
preddat <- expand.grid(log.diversity=c(0:5),
location =unique(biodepth$location))
preddat <- expand.grid(log.diversity=c(0:6),
location =unique(biodepth$location))
summary(biodepth)
preddat <- expand.grid(log.diversity=c(0:5),
location =unique(biodepth$location))
preddat
## get out the model formula
form <- formula(mod1, fixed.only=T)
form
form <- update(form, NULL~.) ## removes the response part
form
predmat <- model.matrix(form, data=preddat)
head(predmat)
## remember that y = X*beta
## prediction is
preddat$pred.hand <- as.vector(predmat %*% fixef(mod.pl.lmer1))
## remember that y = X*beta
## prediction is
preddat$pred.hand <- as.vector(predmat %*% fixef(mod1))
head(preddat,n=10)
ranefmat <- model.matrix(~0 + location, preddat)
dim(ranefmat) ## need 10 columns!
colnames(ranefmat)
(ranef(mod.pl.lmer1)$shadehouse[,1])
(ranef(mod.pl.lmer1)$location[,1])
(ranef(mod1)$location[,1])
preddat$pred.hr <- predmat %*% fixef(mod1) +
ranefmat %*% (ranef(mod1)$location[,1])
head(preddat,n=10) ## manual and automated versions agree
## then calculate the standard errors for each prediction pt
## using the model matrix
semod <-  sqrt(diag(predmat%*%vcv%*%t(predmat)))
vcv <- vcov(mod1)
## then calculate the standard errors for each prediction pt
## using the model matrix
semod <-  sqrt(diag(predmat%*%vcv%*%t(predmat)))
semod
dim(biodepth)
#we have a very large number of sampling units, so we can probably assume that the t value is being estimated from a standard t-distribution where t = 1.96
# however fo the sake of learning, our model had 103 data pts, 4 fixed effects and 1 random effect
qt(p=0.025, df = 476-2-8)  #this tells us the t-value we could use here for constructing the confidence intervals
## then we can get the confidence intervals
preddat$ucl <- preddat$pred.fix + semod*1.97
## then calculate the standard errors for each prediction pt
## using the model matrix
semod <-  sqrt(diag(predmat%*%vcv%*%t(predmat)))
head(preddat)
## then we can get the confidence intervals
preddat$ucl <- preddat$pred.hand + semod*1.97
preddat$lcl <- preddat$pred.hand - semod*1.97
head(preddat)
ggplot(data=preddat, aes(x=log.diversity, y=pred.hand,
ymin=lcl, ymax=ucl)) +
geom_smooth(stat='identity') + theme_classic()
ggplot(data=biodepth, aes(x=log.diversity, y=biomass)) + geom_point()+
geom_smooth(data=preddat,aes(x=log.diversity, y=pred.hand, ymin=lcl, ymax=ucl),
stat='identity')
preddat$pred.hand.orig <- (preddat$pred.hand)^2
preddat$ucl.orig <- (preddat$ucl)^2
preddat$lcl.orig <- (preddat$lcl)^2
head(preddat)
ggplot(data=biodepth, aes(x=log.diversity, y=biomass)) + geom_point()+
geom_smooth(data=preddat,aes(x=log.diversity, y=pred.hand.orig, ymin=lcl.orig, ymax=ucl.orig),
stat='identity')
head(preddat)
preddat$ucl.hr <- preddat$pred.hr + semod*1.97
preddat$lcl.hr <- preddat$pred.hr - semod*1.97
head(preddat)
preddat$pred.hr.orig <- (preddat$pred.hr)^2
preddat$ucl.hr.orig <- (preddat$ucl.hr)^2
preddat$lcl.hr.orig <- (preddat$lcl.hr)^2
head(preddat)
ggplot(data=biodepth, aes(x=log.diversity, y=biomass,colour=location)) + geom_point()+
geom_smooth(data=preddat,aes(x=log.diversity, y=pred.hr.orig, ymin=lcl.hr.orig, ymax=ucl.hr.orig),stat='identity')
ggplot(data=biodepth, aes(x=log.diversity, y=biomass,colour=location)) + geom_point()+
geom_smooth(data=preddat,aes(x=log.diversity, y=pred.hr.orig, ymin=lcl.hr.orig, ymax=ucl.hr.orig,colour=location),stat='identity')
## how do we add this in?
##  the variation among shadehouses is given by
VarCorr(mod1)
## extract the variance using
vc1 <- as.data.frame(VarCorr(mod1))
vc1
var.loc <- vc1[vc1$grp=='location', 'vcov']
var.loc
## now recalculate the std. errors
semod <-  sqrt(diag(predmat%*%vcv%*%t(predmat)) + var.sh)
## now recalculate the std. errors
semod <-  sqrt(diag(predmat%*%vcv%*%t(predmat)) + var.loc)
semod
preddat$ucl.unknown <- preddat$pred.hand + semod*1.97
preddat$lcl.unknown <- preddat$pred.hand - semod*1.97
head(preddat,n=15)   #sequence repeats across greenhouses
ggplot(data=preddat, aes(x=log.diversity, y=pred.hand, ymin=lcl.unknown, ymax=ucl.unknown)) +geom_smooth(stat='identity') +theme_classic()
