library(ape)
library(phylolm)
library(lme4)
library(nlme)
library(phytools)
#library(phyr)
#library(picante)
library(caper)
#make a phylogeny with 15 tips (i.e. 15 species)
n <- 15
phy <- compute.brlen(rtree(n=n), method = "Grafen", power = 1)
par(mfrow=c(1,1))
plot(phy)
# This function simulates some trait data for the species in the phylogeny evolving according to a given model of evolution (in this case Brownian motion - random drift model) (we will discuss brownian motion further later on)
x <- rTraitCont(phy, model = "BM", sigma = 1)
par(mfrow=c(1,2))
contMap(phy, x=x)
par(mai=c(.8,.1,.1,.1))
plot(x,1:length(x))
x
plot(phy)
# construct the covariance matrix of shared path lengths
TreeCovar <- vcv.phylo(phy)
TreeCovar
phy.lam.1.0 <- transf.branch.lengths(phy=phy, model="lambda", parameters=list(lambda = 1.0))$tree
phy.lam.0.5 <- transf.branch.lengths(phy=phy, model="lambda", parameters=list(lambda = 0.5))$tree
phy.lam.0.0 <- transf.branch.lengths(phy=phy, model="lambda", parameters=list(lambda = 0.0))$tree
par(mfrow=c(1,4))
plot(phy); plot(phy.lam.1.0); plot(phy.lam.0.5); plot(phy.lam.0.0)
TreeCovar <- vcv.phylo(phy)
TreeCovar.1.0 <- vcv.phylo(phy.lam.1.0)
TreeCovar.0.5 <- vcv.phylo(phy.lam.0.5)
TreeCovar.0.0 <- vcv.phylo(phy.lam.0.0)
TreeCovar.0.0   # this is an Identity matrix
quartz()
par(mfrow=c(1,2))
contMap(phy, x=x)
par(mai=c(.8,.1,.1,.1))
plot(x,1:length(x))
par(mfrow=c(1,2))
contMap(phy, x=x)
par(mai=c(.8,.1,.1,.1))
plot(x,1:length(x))
#now make a dataframe of the trait data (this is not actually necessary..)
d <- data.frame(x)
d
lm1 <- lm(x~1,data=d)
summary(lm1)
# now add in the phylogeny with pagel's lambda = 0.5
gls2 <- gls(x~1, d, correlation = corPagel(0.5 , phy = phy,fixed=TRUE))
summary(gls2)
# now add in the phylogeny with pagel's lambda = 0.5
gls2 <- gls(x~1, d, correlation = corPagel(0.5 , phy = phy,fixed=F))
summary(gls2)
# now add in the phylogeny with pagel's lambda = 0.5
gls2 <- gls(x~1, d, correlation = corPagel(0.5 , phy = phy,fixed=T))
gls3 <- gls(x~1, d, correlation = corSymm(CovarI[lower.tri(CovarI)], fixed=TRUE))
summary(gls3)  #compare to lm1 -> identical!
#first, an identity matrix
CovarI <- diag(15)
CovarI
gls3 <- gls(x~1, d, correlation = corSymm(CovarI[lower.tri(CovarI)], fixed=TRUE))
summary(gls3)  #compare to lm1 -> identical!
summary(gls1) # identical
gls1 <- gls(x~1, d)
summary(gls1) # identical
#second, the covariance matrix for the tree we made with Pagel's lambda = 0.0 (TreeCovar.0.0)
gls4 <- gls(x~1, d, correlation = corSymm(TreeCovar.0.0[lower.tri(TreeCovar.0.0)],fixed=TRUE))
summary(gls4)  #compare to lm1 -> identical!
#third, the covariance matrix for the tree we made with Pagel's lambda = 0.5 (TreeCovar.0.5)
gls5 <- gls(x~1, d, correlation = corSymm(TreeCovar.0.5[lower.tri(TreeCovar.0.5)],fixed=TRUE))
summary(gls5)  #compare to gls2 -> identical
summary(gls2)
d <- data.frame(site=rep(1:4, each=6), plot=rep(1:6, times=4), x=0)
dim(d)
d
d$site <- as.factor(d$site)
summary(d)
#now lets make some modelled response values
b0 <- 0
sd.b <- 1   #across sites variation
sd.e <- .5  #within sites variation
for(i in d$site){
dd <- d[d$site == i,]
nn <- nrow(dd)
#introduce between site variation
b1.site <- rnorm(n=1, mean=0, sd=sd.b)
#introduce within site variation
d$x[d$site == i] <- b0 + b1.site + rnorm(n=nn, sd=sd.e)
}
summary(d)
plot(x ~ site, d, xlab="site", ylab="x")
#first define the grouping structure
vcv.1 <- kronecker(sd.b^2*diag(nrow=4), matrix(1, nrow=6, ncol=6))
vcv.1
#second impose within sites covariance as the maximum covariance across the main  diagonal (the covariance between an site and itself)
vcv <- vcv.1 + sd.e^2*diag(dim(d)[1])
vcv
#now turn this into a phylogeny
phy.lm <- vcv2phylo(vcv, tolerance = 1e-3)
phy.lm$tip.label <- 1:24
phy.lm <- multi2di(phy.lm) #turns multichotomies into dichotomies with zero branch lengths (necessary for gls to run..)
par(mfrow=c(1,2))
plot(phy.lm)
plot(d$x, 1:length(d$x), xlab="site", ylab="x")
z.lm <- lm(x ~ 1, REML=F, data=d)
summary(z.lm)
AIC(z.lm)
z.lmm <- lmer(x ~ 1 + (1|site), REML=F, data=d)
summary(z.lmm)
z.gls <- gls(x ~ 1, correlation = corPagel(1.0 , phy = phy.lm,fixed=T) , data = d, method="ML")
summary(z.gls)
AIC(z.lm,z.lmm,z.gls)
n <- 15
phy <- compute.brlen(rtree(n=n), method = "Grafen", power = 1)
par(mfrow=c(1,2))
plot(phy)
x <- rTraitCont(phy, model = "BM", sigma = 1)
# model OU process (stabilizing selection)
y <- rTraitCont(phy, model = "OU", sigma = 1,alpha=5)
par(mfrow=c(2,2))
contMap(phy, x=x)
par(mai=c(.8,.1,.1,.1))
plot(x,1:length(x))
contMap(phy, x=y)
par(mai=c(.8,.1,.1,.1))
plot(y,1:length(y))
meandata <- read.csv("exampledata/Savanna_seedlings.csv", header=TRUE, na.strings="*")
summary(meandata)
meandata$Species <- as.factor(meandata$Species)
meandata$Species <- as.factor(meandata$Species)
meandata$Species <- as.factor(meandata$Species)
meandata$Family <- as.factor(meandata$Family)
meandata$Continent <- as.factor(meandata$Continent)
meandata$Climate <- as.factor(meandata$Climate)
summary(meandata)
tree1 <- read.nexus("exampledata/Savanna_seedling_nexus",tree.names = NULL)
dim(meandata)
tree1 <- read.nexus("exampledata/Savanna_seedling_nexus",tree.names = NULL)
tree1
plot(tree1)
par(mfrow=c(1,1))
plot(tree1)
#we can deal with additive trees, but typically pgls methods use an ultrametric tree where the branches have been scaled to be equal length
#the following function can do this using a parameter called lambda. THIS IS NOT PAGEL's LAMBDA
#deciding on which transformation is appropriate is a whole other discussion which i would like to avoid for now (this is longhand for i dont understand this well yet ;-))
#typically I also run models with additive trees
treeU <- chronopl(tree1, lambda=0.1)
par(mfrow=c(1,2), mai=c(.8,.1,.1,.1))
plot(tree1)
plot(treeU)
#now link the data to the tree using the caper function 'comparative.data'
#the trick here is that the species names must be the same in the tree and the df and also the species column in the df must be named "Species"
combine<-comparative.data(treeU,meandata,Species,vcv=TRUE,na.omit=F)
combine
phy.min <- combine$phy
plot(phy.min)
meandata2 <- combine$data
dim(meandata2)
#now link the data to the tree using the caper function 'comparative.data'
#the trick here is that the species names must be the same in the tree and the df and also the species column in the df must be named "Species"
combine<-comparative.data(tree,meandata,Species,vcv=TRUE,na.omit=F)
#now link the data to the tree using the caper function 'comparative.data'
#the trick here is that the species names must be the same in the tree and the df and also the species column in the df must be named "Species"
combine<-comparative.data(tree1,meandata,Species,vcv=TRUE,na.omit=F)
#now link the data to the tree using the caper function 'comparative.data'
#the trick here is that the species names must be the same in the tree and the df and also the species column in the df must be named "Species"
combine<-comparative.data(treeU,meandata,Species,vcv=TRUE,na.omit=F)
# the trait i am interested in is root mass fraction
# here i am using pagel's lambda
mod0 <- pgls(RMF  ~ 1, combine, lambda='ML')
summary(mod0)
mod1 <- pgls(RMF  ~ log(Mass20) + Continent + Climate, combine, lambda='ML')
summary(mod1)
#ignore the warning
z.lam <- phylolm(meandata2$RMF ~ 1, phy=phy.min, model = "lambda")
summary(z.lam)  #same result as above
# Now add in the full fixed effects model to test (bX)
z.lam.1 <- phylolm(RMF ~ log(Mass20) + Continent + Climate, data = meandata2, phy=phy.min, model = "lambda")
summary(z.lam.1)  #same result as above; RMF is borderline significant
#parametric bootstrap
z.lam.1.boot <- phylolm(RMF ~ log(Mass20) + Continent + Climate, data = meandata2, phy=phy.min, model = "lambda",boot=500)
confint(z.lam.1.boot)
hist(meandata2$RER)
mod1 <- pgls(RER  ~ log(Mass20) + Continent + Climate, combine, lambda='ML')
summary(mod1)
mod1 <- pgls(RER  ~ log(Mass5) + Continent + Climate, combine, lambda='ML')
summary(mod1)
library(V.PhyloMaker)
install.packages("devtools")
library(V.PhyloMaker)
install_github("jinyizju/V.PhyloMaker")
library(devtools)
library(V.PhyloMaker)
install_github("jinyizju/V.PhyloMaker")
# input example species list
species <- read.csv("Dipterocarpaceae.specieslist.csv")
summary(species)
getwd()
setwd("~/Dropbox/Teaching/XTBG advanced stats 2020/Lectures/Lesson 9 Phylogenetic regression/make_a_tree")
# input example species list
species <- read.csv("Dipterocarpaceae.specieslist.csv")
summary(species)
# generate 10 phylogenies
tree <- phylo.maker(sp.list = species, tree = GBOTB.extended, nodes = nodes.info.1, scenarios = "S2", r = 10)    # r means the number of runs, the default is r = 1. Here r is set as 10, so 10 runs will be executed and 10 phylogenies will be built.
library(V.PhyloMaker)
# generate 10 phylogenies
tree <- phylo.maker(sp.list = species, tree = GBOTB.extended, nodes = nodes.info.1, scenarios = "S2", r = 10)    # r means the number of runs, the default is r = 1. Here r is set as 10, so 10 runs will be executed and 10 phylogenies will be built.
phy <- read.tree("scenario.2_run.1.tre")
for (i in 1:10)
{
write.tree(tree$scenario.2[[i]], paste("scenario.2_run.", i, ".tre", sep=""))
}
phy <- read.tree("scenario.2_run.1.tre")
phy
plot(phy)
library(brms)
library(ggplot2)
library(ape)
library(caper)
# database with the corrected data
bark <- read.csv("bark/bark_nutrition.csv", header = TRUE, sep = ",", row.names = NULL)
